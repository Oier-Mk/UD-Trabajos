observeEvent(
input$tdt, {
showModal(modalDialog(
plotOutput("pieplot"),
footer = NULL,
easyClose = TRUE
))
})
}
shinyApp(ui, server)
ggplot(data,aes(x=NAME_EDUCATION_TYPE,y=AMT_CREDIT))+geom_boxplot()
runApp()
runApp()
runApp()
runApp()
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
View(aceptados)
runApp()
View(aceptados)
runApp()
View(aceptados)
ggplot(aceptados,aes(x=ITERATION,y=AMT_CREDIT))+geom_boxplot()
shiny::runApp()
summary(output$tiposCantidad)
summary(tiposCantidad)
summary(data$NAME_INCOME_TYPE)
tapply(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
library("psych")
install.packages("psych")
library("psych")
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
describeBy(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, mat = TRUE)
tapply(data$AMT_CREDIT, data$AMT_INCOME_TOTAL, summary)
tapply(data$AMT_INCOME_TOTAL,data$AMT_CREDIT, summary)
data[, as.list(summary(data)), by = AMT_INCOME_TOTAL]
data[, as.list(summary(data)), by = data$AMT_INCOME_TOTAL]
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
runApp()
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Pensioner"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "State servant"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Unemployed"
summary(data[filtro,])
filtro = data$NAME_INCOME_TYPE = "Working"
summary(data[filtro,])
summary(data[filtro,]$AMT_CREDIT)
variable = summary(data[filtro,])
runApp()
summary(variable$AMT_CREDIT)
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = summary(data[filtro,])
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE = "Commercial associate"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Pensioner"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "State servant"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Unemployed"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
filtro = data$NAME_INCOME_TYPE = "Working"
variable = data[filtro,]
summary(variable$AMT_CREDIT)
View(variable)
source("~/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/ShinyDisplayDeConclusiones/Summarys.R", echo=TRUE)
runApp()
summary(data$AMT_CREDIT)
runApp()
shiny::runApp()
write_xlsx(aceptados7,"XLSX/Split/Aceptados7.xlsx")
data <- read_excel("XLSX/DatosLimpios.xlsx")
library("readxl")
library("writexl")
library("ggplot2")
data <- read_excel("XLSX/DatosLimpios.xlsx")
shiny::runApp()
table(aceptados$ITERATION)
table(denegados$ITERATION)
runApp()
runApp()
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
output$piramide <- renderPlot({
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
})
observeEvent(
input$piramide, {
showModal(modalDialog(
plotOutput("piramide"),
footer = NULL,
easyClose = TRUE
))
})
server <- function(input, output) {
output$tiposCantidad <- renderPlot({
ggplot(data,aes(x=NAME_INCOME_TYPE,y=AMT_CREDIT))+geom_boxplot()
})
observeEvent(
input$tiposCantidad, {
showModal(modalDialog(
plotOutput("tiposCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$aIteracionesCantidad <- renderPlot({
ggplot(aceptados, aes(x=ITERATION, fill=ITERATION )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
})
observeEvent(
input$aIteracionesCantidad, {
showModal(modalDialog(
plotOutput("aIteracionesCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$dIteracionesCantidad <- renderPlot({
ggplot(denegados, aes(x=ITERATION, fill=ITERATION )) +
geom_bar( ) +
scale_fill_brewer(palette = "Set1") +
theme(legend.position="none")
})
observeEvent(
input$dIteracionesCantidad, {
showModal(modalDialog(
plotOutput("dIteracionesCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$piramide <- renderPlot({
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
})
observeEvent(
input$piramide, {
showModal(modalDialog(
plotOutput("piramide"),
footer = NULL,
easyClose = TRUE
))
})
}
# Libraries
library(ggplot2)
library(hrbrthemes)
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000, mean=2)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
# Dummy data
data <- data.frame(
var1 = rnorm(1000),
var2 = rnorm(1000)
)
# Chart
p <- ggplot(data, aes(x=x) ) +
# Top
geom_density( aes(x = var1, y = ..density..), fill="#69b3a2" ) +
geom_label( aes(x=4.5, y=0.25, label="variable1"), color="#69b3a2") +
# Bottom
geom_density( aes(x = var2, y = -..density..), fill= "#404080") +
geom_label( aes(x=4.5, y=-0.25, label="variable2"), color="#404080") +
theme_ipsum() +
xlab("value of x")
p
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
ui <- navbarPage("Concesión de créditos",
tabPanel("TiposCantidad",
plotOutput("tiposCantidad"),
actionButton("Summary",verbatimTextOutput("summaryTiposCantidad"))
),
tabPanel("IteracionesCantidad"),
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- navbarPage("Concesión de créditos",
tabPanel("Concesión de créditos",
titlePanel("Concesión de créditos\n\n"),
imageOutput("logo"), align =  "Center"
),
tabPanel("TiposCantidad",
plotOutput("tiposCantidad"),
actionButton(verbatimTextOutput("summaryTiposCantidad"),"Summary")
),
tabPanel("IteracionesCantidad",
plotOutput("aIteracionesCantidad"),
plotOutput("dIteracionesCantidad")
)
)
shiny::runApp()
runApp()
runApp()
runApp()
library("theme_ipsum")
install.packages("theme_ipsum")
library(hrbrthemes)
library(tidyverse)
library(hrbrthemes)
library(viridis)
shiny::runApp()
shiny::runApp()
runApp()
library("readxl")
library("writexl")
library("ggplot2")
iteraciones <- read_excel("DatosParaMostrar/Iteraciones.xlsx")
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
# Define UI for application that draws a histogram
library(shiny)
ui <- navbarPage("Concesión de créditos",
tabPanel("Concesión de créditos",
titlePanel("Concesión de créditos\n"),
imageOutput("logo"), align =  "Center"
),
tabPanel("Criterios para la concesión",
h3("1. El caso en el que los gastos del usuario no superen el 30% de los ingresos anuales."),
p("1. Si se superan los gastos con el crédito superan el 30% de los ingresos anuales -> se estudia."),
p("2. Si se superan los gastos con el crédito NO superan el 30% de los ingresos anuales -> se acepta."),
h3("2. El caso en el que la cantidad solicitada sea inferior al 80% del valor de tasación del inmueble a hipotecar."),
p("1. Si el valor de tasación es inferior al 80% del valor de tasación -> se acepta."),
p("2. Si el valor de tasación NO es inferior al 80% del valor de tasación -> se estudia."),
h3("3. El caso en el que se tengan propiedades para poder avalar el crédito en caso de impago."),
p("1. Si NO se tiene un inmueble con el que poder avalar -> se estudia."),
p("2. Si se tiene un inmueble con el que poder avalar -> se acepta."),
h3("4. El caso en el que se tengan hijos o no a su cargo."),
p("1. Si se tienen hijos -> se estudia."),
p("2. Si NO se tienen hijos -> se acepta."),
h3("5. Se estudia la cantidad de trabajadores en el domicilio."),
p("1. Si la cantidad de trabajadores en la familia es 4 o más -> se concede."),
p("2. Si la cantidad de trabajadores es igual a 2 o a 3 -> se estudia."),
p("3. Si la cantidad de trabajadores es uno -> se deniega."),
h3("6. Si se dispone de un coche para poder avalar el crédito en caso de impago."),
p("1. Si no se tiene un coche -> se deniega."),
p("2. Si se tiene un coche con más de 10 años -> se deniega."),
p("3. Si se tiene un coche de menos de 5 años -> se acepta."),
p("4. Si se tiene un coche entre 5 y 10 años -> se estudia."),
h3("7. El caso en el que el solicitante sea funcionario"),
p("1. Si se es funcionario -> se acepta."),
p("2. Si no se es funcionario -> se estudia."),
h3("8. El caso en el que haya habido algún tipo de morosidad anteriormente."),
p("1. Si se ha sido moroso -> se deniega."),
p("2. Si NO se ha sido moroso -> se acepta.")
),
tabPanel("TiposCantidad",
plotOutput("tiposCantidad"),
actionButton(verbatimTextOutput("summaryTiposCantidad"),"Summary")
),
tabPanel("TiposCantidadAceptado",
plotOutput("tiposCantidad"),
plotOutput("tiposCantidadAceptado"),
),
tabPanel("TiposCantidadDenegado",
plotOutput("tiposCantidad"),
plotOutput("tiposCantidadDenegado"),
),
tabPanel("IteracionesCantidad",
plotOutput("iteracionesCantidad"),
),
tabPanel("Avales",
"Clientes con coche...",
plotOutput("car"),
"Clientes con casa...",
plotOutput("property"),
"Ambas...",
plotOutput("both"),
"Ninguno...",
plotOutput("none"),
)
)
server <- function(input, output) {
output$car = renderPlot({
data$car = is.na(data$OWN_CAR_AGE)
barplot( height=table(data$car), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene coche","No tiene coche")   )
})
output$property = renderPlot({
data$property = is.na(data$APARTMENTS_AVG)
table(data$property)
barplot( height=table(data$property), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene propiedades","No tiene propiedades")     )
})
output$both = renderPlot({
data$both = is.na(data$APARTMENTS_AVG) & is.na(data$OWN_CAR_AGE)
table(data$both)
barplot( height=table(data$both), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene propiedades y coche","No tiene propiedades y coche")     )
})
output$none = renderPlot({
data$none = !is.na(data$APARTMENTS_AVG) & !is.na(data$OWN_CAR_AGE)
table(data$none)
barplot( height=table(data$none), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene propiedades y coche","No tiene ni propiedades ni coche")     )
})
output$iteracionesCantidad = renderPlot({
# Stacked barplot with multiple groups
ggplot(iteraciones, aes(x=iteraciones$ITERACION, y=iteraciones$CTD, fill=iteraciones$EST)) +
xlab("Iteración") + ylab("Cantidad") + scale_fill_brewer(palette="Paired")+
geom_bar(stat="identity")
})
output$logo <- renderImage({
return(
list(
src = "/Users/mentxaka/Documents/Universidad De Deusto/2021-22/1er Semestre/Big Data y Business Intelligence/Proyecto/ShinyDisplayDeConclusiones/DatosParaMostrar/image/Inicio.png",
contentType = "image/png",
alt = "bank logo"
)
)
})
output$tiposCantidad <- renderPlot({
ggplot(data,aes(x=NAME_INCOME_TYPE,y=AMT_CREDIT)) + geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred") + geom_boxplot(width=0.1) + theme_minimal()
})
observeEvent(
input$tiposCantidad, {
showModal(modalDialog(
plotOutput("tiposCantidad"),
footer = NULL,
easyClose = TRUE
))
})
output$tiposCantidadAceptado <- renderPlot({
ggplot(aceptados,aes(x=NAME_INCOME_TYPE,y=AMT_CREDIT))+ggtitle("ACEPTADAS")+ geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred") + geom_boxplot(width=0.1) + theme_minimal()
})
observeEvent(
input$tiposCantidadAceptado, {
showModal(modalDialog(
plotOutput("tiposCantidadAceptado"),
footer = NULL,
easyClose = TRUE
))
})
output$tiposCantidadDenegado <- renderPlot({
ggplot(denegados,aes(x=NAME_INCOME_TYPE,y=AMT_CREDIT))+ggtitle("DENEGADOS")+ geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred") + geom_boxplot(width=0.1) + theme_minimal()
})
observeEvent(
input$tiposCantidadDenegado, {
showModal(modalDialog(
plotOutput("tiposCantidadDenegado"),
footer = NULL,
easyClose = TRUE
))
})
output$summary <- renderPrint({
summary(data)
})
}
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Library/Mobile Documents/com~apple~CloudDocs/3º Carrera/Semestre 1/Big Data & Business Intelligence/UD-BigData-main/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/3º Carrera/Semestre 1/Big Data & Business Intelligence/UD-BigData-main/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/3º Carrera/Semestre 1/Big Data & Business Intelligence/UD-BigData-main/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
source("~/Library/Mobile Documents/com~apple~CloudDocs/3º Carrera/Semestre 1/Big Data & Business Intelligence/UD-BigData-main/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
View(data)
source("~/Library/Mobile Documents/com~apple~CloudDocs/3º Carrera/Semestre 1/Big Data & Business Intelligence/UD-BigData-main/Proyecto/Limpiado de datos y toma de decisiones/LimpiadoDeDatos.R", echo=TRUE)
shiny::runApp()
View(data)
View(data)
runApp()
View(data)
runApp()
shiny::runApp()
data <- read_excel("DatosParaMostrar/DataProcesado.xlsx")
aceptados <- data[data$STATE == TRUE,]
denegados <- data[data$STATE == FALSE,]
filtro = data$NAME_INCOME_TYPE == "Commercial associate"
summary(data$AMT_CREDIT)
filtro = aceptados$NAME_INCOME_TYPE == "Commercial associate"
summary(aceptados$AMT_CREDIT)
filtro = denegados$NAME_INCOME_TYPE == "Commercial associate"
summary(denegados$AMT_CREDIT)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(data)
output$both = renderPlot({
data$both = is.na(data$APARTMENTS_AVG) & is.na(data$OWN_CAR_AGE)
table(data$both)
barplot( height=table(data$both), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene propiedades y coche","No tiene propiedades y coche")     )
})
data$both = is.na(data$APARTMENTS_AVG) & is.na(data$OWN_CAR_AGE)
data$both = is.na(data$APARTMENTS_AVG) & is.na(data$OWN_CAR_AGE)
table(data$both)
barplot( height=table(data$both), density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col="brown", names.arg=c("Tiene propiedades y coche","No tiene propiedades y coche")     )
data$none = !is.na(data$APARTMENTS_AVG) & !is.na(data$OWN_CAR_AGE)
table(data$none)
runApp()
runApp()
